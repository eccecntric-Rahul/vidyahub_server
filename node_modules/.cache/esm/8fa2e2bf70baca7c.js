let csvModel,fs,csvParser;_70b‍.x([["default",()=>_70b‍.o]]);_70b‍.w("../model/csvModel",[["default",["csvModel"],function(v){csvModel=v}]]);_70b‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_70b‍.w("csv-parser",[["default",["csvParser"],function(v){csvParser=v}]]);


const csvFile=async (req,res)=>{
    _70b‍.g.console.log(req.fields);
    const results =[];
    var finalResult =[];
    var highQues ;
    var lowQues;
    var mediumQues;
    var shuffledLow,shuffledHigh,shuffledMedium,selectedLow,selectedHigh,selectedMedium;
    if(req.files.csv){
       
      const reader= await fs.createReadStream(req.files.csv.path)
        .pipe(csvParser())
        .on('data',(data)=>results.push(data))
        .on('end',()=>{
            // res.json(results);
           highQues= results.filter((item)=>{if(item.level=="high")return item});
           lowQues= results.filter((item)=>{if(item.level=="low")return item});
           mediumQues= results.filter((item)=>{if(item.level=="medium")return item});
            _70b‍.g.console.log(highQues,mediumQues,lowQues);

            shuffledHigh= highQues.sort(()=>0.5-Math.random());
            selectedHigh= shuffledHigh.slice(0,req.fields.highNo)

            shuffledLow= lowQues.sort(()=>0.5-Math.random());
            selectedLow= shuffledLow.slice(0,req.fields.lowNo);
            
            shuffledmedium= mediumQues.sort(()=>0.5-Math.random());
            selectedMedium= shuffledMedium.slice(0,req.fields.mediumNo);

            finalResult= [...selectedHigh,...selectedLow,selectedMedium]
            res.send(finalResult);
        }); 
    }
}

_70b‍.d(csvFile);